# tmux plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'thewtex/tmux-mem-cpu-load'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'wfxr/tmux-fzf-url'
set -g @plugin 'tapih/tmux-fzf'
set -g @plugin 'tapih/tmux-ccusage'
set -g @plugin 'xamut/tmux-weather'
set -g @plugin 'laktak/extrakto'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'

run -b '~/.tmux/plugins/tpm/tpm'

is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# basic settings
set-option -g status-position top
set -g history-limit 50000

set -sg escape-time 1
set -g base-index 1
setw -g pane-base-index 1
setw -g mouse on
set -g focus-events on

# UI
set-option -g default-terminal "tmux-256color"
set -ga terminal-overrides ",xterm-256color:RGB"

set -g status-fg white
set -g status-bg black

setw -g window-status-style fg="white",bg="colour235","dim"
setw -g window-status-current-style fg="white",bg="colour240","bold"
setw -g pane-border-style fg="white",bg="black"
set -g pane-active-border-style fg="red",bg="black"
set -g status-left-length 40

# status line
set-option -g status on
set-option -g status-interval 1
# set-option -g status-utf8 on
set-option -g status-justify "centre"
set -g status-style 'bg=black,fg=white'

set-option -g status-left-length 50
set-option -g status-left "📅 #[fg=white,bg=colour235,bold] %D %H:%M:%S #[default]#[fg=white,bg=colour240,bold] #S #[default]"
set-option -g status-right-length 120
# This assumes that repositories are placed under ${HOME}/src/github.com
set-option -g status-right "#{prefix_highlight} 💻 #(tmux-mem-cpu-load --colors --interval 5)"
set-option -ag status-right " | 📝 #(echo $(cd '#{pane_current_path}' && git rev-parse --show-toplevel 2>/dev/null | perl -pe 's|/[^/]+/[^/]+/src/github.com/||g')@$(cd '#{pane_current_path}' && git rev-parse --abbrev-ref HEAD 2>/dev/null))"
set-option -ag status-right " | 💸 #{ccusage_month_cost}/#{ccusage_today_cost}"
set-option -ag status-right " | #{weather}"

set-window-option -g window-status-format " #I: #W "
set-window-option -g window-status-current-format "#[fg=white,bg=colour240,bold] #I: #W #[default]"

# fzf
TMUX_FZF_PREVIEW=1
TMUX_FZF_PANE_CURRENT_WINDOW=1
TMUX_FZF_PANE_FORMAT="#{pane_current_command}"
TMUX_FZF_OPTIONS="-w 80% -h 80%"

# Key bindings
set -g prefix C-t
unbind C-b
setw -g mode-keys vi

bind -n M-left previous-window
bind -n M-right next-window

bind C-r source-file ~/.tmux.conf \; display "Reloaded!"

bind C-c new-window -c '#{pane_current_path}'
bind C-x kill-pane
bind C-w kill-window
# bind C-w run-shell -b "${HOME}/.config/tmux/scripts/switch_kill.sh"

bind - split-window -v -c "#{pane_current_path}"
bind \\ split-window -h
bind \\ split-window -h -c "#{pane_current_path}"
bind | split-window -h -c "#{pane_current_path}" \; select-layout even-horizontal

bind = select-layout even-vertical
bind + select-layout even-horizontal

bind "C-t" run-shell -b "${HOME}/.tmux/plugins/tmux-fzf/scripts/window.sh switch"

# floating window
bind C-g display-popup -d "#{pane_current_path}" -E -T "lazygit" -w 90% -h 90% -e "XDG_CONFIG_HOME=~/.config" "lazygit"
bind C-y display-popup -d "#{pane_current_path}" -E -T "yazi" -w 90% -h 90% "yazi"
bind C-d display-popup -d "#{pane_current_path}" -E -T "lazydocker" -w 90% -h 90% "lazydocker"
bind C-s display-popup -d "#{pane_current_path}" -E -T "gh dash" -w 90% -h 90% "gh dash"
bind C-q display-popup -E -T "todo" -w 80% -h 80% "vim ~/.TODO.md"
bind C-k display-popup -E -T "ghq" -w 80% -h 80% '
  selected=$(ghq list -p | fzf --preview "tree -C {} | head -200" || true)
  [ -z "$selected" ] && exit 0

  window=$(basename "$selected")
  session=$(tmux display -p "#S")

  if tmux list-windows -t "$session" -F "#W" | grep -Fxq "$window"; then
    tmux select-window -t "$session:$window"
    exit 0
  fi

  cd "$selected"
  if command -v tmex >/dev/null 2>&1; then
    tmex "$session" -w "$window" -l "{21}11" -c new-window -f 1 -- nvim clear
  else
    tmux new-window -t "$session" -n "$window" -c "$PWD" "nvim .; clear"
  fi
  tmux select-window -t "$session:$window"
'

bind C-j display-popup -d "#{pane_current_path}" -E -T "branch" -w 80% -h 80% '
  branch=$(
    git branch --sort=-authordate |
      fzf \
        --exit-0 \
        --layout=reverse \
        --info=hidden \
        --no-multi \
        --preview-window="right,65%" \
        --prompt="CHECKOUT BRANCH > " \
        --preview="echo {} | tr -d \" *\" | xargs git l --color=always" |
      head -n 1 |
      perl -pe "s/\s//g" |
      perl -pe "s/\*//g" |
      perl -pe "s/remotes\/origin\///g"
  )
  if [[ -n "$branch" ]]; then
    git switch $branch
  fi
'

set -g @fzf-url-bind C-u
set -g @extrakto_key C-e

# yazi image previewd
set -g allow-passthrough on
set -ga update-environment TERM
set -ga update-environment TERM_PROGRAM

# synchronize pane
bind a \
  if-shell "tmux show-window-options synchronize-panes | grep off" \
    "setw synchronize-panes on" \
    "setw synchronize-panes off" \;\
    display "synchronize-panes #{?pane_synchronized,on,off}"

# move
bind C-h next-window
bind C-l previous-window

# tmux-nvim navigation
bind -n 'C-Left' if-shell "$is_vim" 'send-keys C-Left' 'select-pane -L'
bind -n 'C-Right' if-shell "$is_vim" 'send-keys C-Right' 'select-pane -R'
bind -n 'C-Up' if-shell "$is_vim" 'send-keys C-Up' 'select-pane -U'
bind -n 'C-Down' if-shell "$is_vim" 'send-keys C-Down' 'select-pane -D'
bind -T copy-mode-vi 'C-Left' select-pane -L
bind -T copy-mode-vi 'C-Right' select-pane -R
bind -T copy-mode-vi 'C-Up' select-pane -U
bind -T copy-mode-vi 'C-Down' select-pane -D

# resize with arrows
bind -n 'C-Home' if-shell "$is_vim" 'send-keys C-Home' 'resize-pane -L 20'
bind -n 'C-End' if-shell "$is_vim" 'send-keys C-End' 'resize-pane -R 20'
bind -n 'C-PageUp' if-shell "$is_vim" 'send-keys C-PageUp' 'resize-pane -U 5'
bind -n 'C-PageDown' if-shell "$is_vim" 'send-keys C-PageDown' 'resize-pane -D 5'
bind  -T copy-mode-vi 'C-Home' resize-pane -L 20
bind  -T copy-mode-vi 'C-End' resize-pane -R 20
bind  -T copy-mode-vi 'C-PageUp' resize-pane -U 5
bind  -T copy-mode-vi 'C-PageDown' resize-pane -D 5

# copy paste
if-shell "! uname -a | grep -q microsoft" {
  bind -T copy-mode-vi Enter send -X copy-pipe-and-cancel "xsel -pi && xsel -po | xsel -bi"
  bind -T copy-mode-vi y     send -X copy-pipe-and-cancel "xsel -pi && xsel -po | xsel -bi"
}

if-shell "uname -a | grep -q microsoft" {
  bind -T copy-mode-vi Enter send -X copy-pipe-and-cancel "/mnt/c/Tools/win32yank.exe -i"
  bind -T copy-mode-vi y     send -X copy-pipe-and-cancel "/mnt/c/Tools/win32yank.exe -i"
}

bind -T copy-mode-vi v     send -X begin-selection
bind -T copy-mode-vi w     send -X next-word-end
bind -T copy-mode-vi C-y   send -X rectangle-toggle \; send -X begin-selection
bind -T copy-mode-vi C-v   send -X rectangle-toggle \; send -X begin-selection
bind -T copy-mode-vi C-[   send -X cancel

unbind \;
bind \; paste
